// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/xtrace.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xtrace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* XTraceReportv4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XTraceReportv4_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fxtrace_2eproto() {
  protobuf_AddDesc_proto_2fxtrace_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/xtrace.proto");
  GOOGLE_CHECK(file != NULL);
  XTraceReportv4_descriptor_ = file->message_type(0);
  static const int XTraceReportv4_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, parent_event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, hrt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, cycles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, threadname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, tenantclass_),
  };
  XTraceReportv4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XTraceReportv4_descriptor_,
      XTraceReportv4::default_instance_,
      XTraceReportv4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XTraceReportv4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XTraceReportv4));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fxtrace_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XTraceReportv4_descriptor_, &XTraceReportv4::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fxtrace_2eproto() {
  delete XTraceReportv4::default_instance_;
  delete XTraceReportv4_reflection_;
}

void protobuf_AddDesc_proto_2fxtrace_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto/xtrace.proto\"\310\002\n\016XTraceReportv4\022"
    "\017\n\007task_id\030\001 \001(\020\022\020\n\010event_id\030\002 \001(\020\022\027\n\017pa"
    "rent_event_id\030\003 \003(\020\022\021\n\ttimestamp\030\004 \001(\003\022\013"
    "\n\003hrt\030\005 \001(\003\022\016\n\006cycles\030\006 \001(\003\022\014\n\004host\030\007 \001("
    "\t\022\022\n\nprocess_id\030\010 \001(\005\022\024\n\014process_name\030\t "
    "\001(\t\022\021\n\tthread_id\030\n \001(\005\022\022\n\nthreadName\030\013 \001"
    "(\t\022\r\n\005agent\030\014 \001(\t\022\016\n\006source\030\r \001(\t\022\r\n\005lab"
    "el\030\016 \001(\t\022\013\n\003key\030\017 \003(\t\022\r\n\005value\030\020 \003(\t\022\014\n\004"
    "tags\030\021 \003(\t\022\023\n\013tenantClass\030\022 \001(\005B(\n\033edu.b"
    "rown.cs.systems.xtraceB\tReporting", 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/xtrace.proto", &protobuf_RegisterTypes);
  XTraceReportv4::default_instance_ = new XTraceReportv4();
  XTraceReportv4::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fxtrace_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fxtrace_2eproto {
  StaticDescriptorInitializer_proto_2fxtrace_2eproto() {
    protobuf_AddDesc_proto_2fxtrace_2eproto();
  }
} static_descriptor_initializer_proto_2fxtrace_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int XTraceReportv4::kTaskIdFieldNumber;
const int XTraceReportv4::kEventIdFieldNumber;
const int XTraceReportv4::kParentEventIdFieldNumber;
const int XTraceReportv4::kTimestampFieldNumber;
const int XTraceReportv4::kHrtFieldNumber;
const int XTraceReportv4::kCyclesFieldNumber;
const int XTraceReportv4::kHostFieldNumber;
const int XTraceReportv4::kProcessIdFieldNumber;
const int XTraceReportv4::kProcessNameFieldNumber;
const int XTraceReportv4::kThreadIdFieldNumber;
const int XTraceReportv4::kThreadNameFieldNumber;
const int XTraceReportv4::kAgentFieldNumber;
const int XTraceReportv4::kSourceFieldNumber;
const int XTraceReportv4::kLabelFieldNumber;
const int XTraceReportv4::kKeyFieldNumber;
const int XTraceReportv4::kValueFieldNumber;
const int XTraceReportv4::kTagsFieldNumber;
const int XTraceReportv4::kTenantClassFieldNumber;
#endif  // !_MSC_VER

XTraceReportv4::XTraceReportv4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XTraceReportv4::InitAsDefaultInstance() {
}

XTraceReportv4::XTraceReportv4(const XTraceReportv4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XTraceReportv4::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_LONGLONG(0);
  event_id_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  hrt_ = GOOGLE_LONGLONG(0);
  cycles_ = GOOGLE_LONGLONG(0);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_id_ = 0;
  process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thread_id_ = 0;
  threadname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tenantclass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XTraceReportv4::~XTraceReportv4() {
  SharedDtor();
}

void XTraceReportv4::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    delete process_name_;
  }
  if (threadname_ != &::google::protobuf::internal::kEmptyString) {
    delete threadname_;
  }
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void XTraceReportv4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XTraceReportv4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XTraceReportv4_descriptor_;
}

const XTraceReportv4& XTraceReportv4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fxtrace_2eproto();
  return *default_instance_;
}

XTraceReportv4* XTraceReportv4::default_instance_ = NULL;

XTraceReportv4* XTraceReportv4::New() const {
  return new XTraceReportv4;
}

void XTraceReportv4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = GOOGLE_LONGLONG(0);
    event_id_ = GOOGLE_LONGLONG(0);
    timestamp_ = GOOGLE_LONGLONG(0);
    hrt_ = GOOGLE_LONGLONG(0);
    cycles_ = GOOGLE_LONGLONG(0);
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    process_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_process_name()) {
      if (process_name_ != &::google::protobuf::internal::kEmptyString) {
        process_name_->clear();
      }
    }
    thread_id_ = 0;
    if (has_threadname()) {
      if (threadname_ != &::google::protobuf::internal::kEmptyString) {
        threadname_->clear();
      }
    }
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    tenantclass_ = 0;
  }
  parent_event_id_.Clear();
  key_.Clear();
  value_.Clear();
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XTraceReportv4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_event_id;
        break;
      }

      // optional sfixed64 event_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_parent_event_id;
        break;
      }

      // repeated sfixed64 parent_event_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_parent_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 1, 25, input, this->mutable_parent_event_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, this->mutable_parent_event_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_parent_event_id;
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hrt;
        break;
      }

      // optional int64 hrt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hrt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hrt_)));
          set_has_hrt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cycles;
        break;
      }

      // optional int64 cycles = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cycles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cycles_)));
          set_has_cycles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_host;
        break;
      }

      // optional string host = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_process_id;
        break;
      }

      // optional int32 process_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_process_name;
        break;
      }

      // optional string process_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_thread_id;
        break;
      }

      // optional int32 thread_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_threadName;
        break;
      }

      // optional string threadName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_threadName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_threadname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->threadname().data(), this->threadname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_agent;
        break;
      }

      // optional string agent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_source;
        break;
      }

      // optional string source = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_label;
        break;
      }

      // optional string label = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_key;
        break;
      }

      // repeated string key = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key(this->key_size() - 1).data(),
            this->key(this->key_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_key;
        if (input->ExpectTag(130)) goto parse_value;
        break;
      }

      // repeated string value = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value(this->value_size() - 1).data(),
            this->value(this->value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_value;
        if (input->ExpectTag(138)) goto parse_tags;
        break;
      }

      // repeated string tags = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_tags;
        if (input->ExpectTag(144)) goto parse_tenantClass;
        break;
      }

      // optional int32 tenantClass = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenantClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenantclass_)));
          set_has_tenantclass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XTraceReportv4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->task_id(), output);
  }

  // optional sfixed64 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->event_id(), output);
  }

  // repeated sfixed64 parent_event_id = 3;
  for (int i = 0; i < this->parent_event_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(
      3, this->parent_event_id(i), output);
  }

  // optional int64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // optional int64 hrt = 5;
  if (has_hrt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->hrt(), output);
  }

  // optional int64 cycles = 6;
  if (has_cycles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cycles(), output);
  }

  // optional string host = 7;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->host(), output);
  }

  // optional int32 process_id = 8;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->process_id(), output);
  }

  // optional string process_name = 9;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->process_name(), output);
  }

  // optional int32 thread_id = 10;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->thread_id(), output);
  }

  // optional string threadName = 11;
  if (has_threadname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->threadname().data(), this->threadname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->threadname(), output);
  }

  // optional string agent = 12;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->agent(), output);
  }

  // optional string source = 13;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->source(), output);
  }

  // optional string label = 14;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->label(), output);
  }

  // repeated string key = 15;
  for (int i = 0; i < this->key_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->key(i).data(), this->key(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->key(i), output);
  }

  // repeated string value = 16;
  for (int i = 0; i < this->value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->value(i).data(), this->value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->value(i), output);
  }

  // repeated string tags = 17;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->tags(i), output);
  }

  // optional int32 tenantClass = 18;
  if (has_tenantclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->tenantclass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XTraceReportv4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->task_id(), target);
  }

  // optional sfixed64 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->event_id(), target);
  }

  // repeated sfixed64 parent_event_id = 3;
  for (int i = 0; i < this->parent_event_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed64ToArray(3, this->parent_event_id(i), target);
  }

  // optional int64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // optional int64 hrt = 5;
  if (has_hrt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->hrt(), target);
  }

  // optional int64 cycles = 6;
  if (has_cycles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cycles(), target);
  }

  // optional string host = 7;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->host(), target);
  }

  // optional int32 process_id = 8;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->process_id(), target);
  }

  // optional string process_name = 9;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->process_name(), target);
  }

  // optional int32 thread_id = 10;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->thread_id(), target);
  }

  // optional string threadName = 11;
  if (has_threadname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->threadname().data(), this->threadname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->threadname(), target);
  }

  // optional string agent = 12;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->agent(), target);
  }

  // optional string source = 13;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->source(), target);
  }

  // optional string label = 14;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->label(), target);
  }

  // repeated string key = 15;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->key(i), target);
  }

  // repeated string value = 16;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->value(i), target);
  }

  // repeated string tags = 17;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->tags(i), target);
  }

  // optional int32 tenantClass = 18;
  if (has_tenantclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->tenantclass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XTraceReportv4::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 event_id = 2;
    if (has_event_id()) {
      total_size += 1 + 8;
    }

    // optional int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int64 hrt = 5;
    if (has_hrt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hrt());
    }

    // optional int64 cycles = 6;
    if (has_cycles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cycles());
    }

    // optional string host = 7;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional int32 process_id = 8;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string process_name = 9;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }

    // optional int32 thread_id = 10;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread_id());
    }

    // optional string threadName = 11;
    if (has_threadname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->threadname());
    }

    // optional string agent = 12;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }

    // optional string source = 13;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string label = 14;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 tenantClass = 18;
    if (has_tenantclass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenantclass());
    }

  }
  // repeated sfixed64 parent_event_id = 3;
  {
    int data_size = 0;
    data_size = 8 * this->parent_event_id_size();
    total_size += 1 * this->parent_event_id_size() + data_size;
  }

  // repeated string key = 15;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->key(i));
  }

  // repeated string value = 16;
  total_size += 2 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  // repeated string tags = 17;
  total_size += 2 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XTraceReportv4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XTraceReportv4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XTraceReportv4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XTraceReportv4::MergeFrom(const XTraceReportv4& from) {
  GOOGLE_CHECK_NE(&from, this);
  parent_event_id_.MergeFrom(from.parent_event_id_);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_hrt()) {
      set_hrt(from.hrt());
    }
    if (from.has_cycles()) {
      set_cycles(from.cycles());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_process_name()) {
      set_process_name(from.process_name());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_threadname()) {
      set_threadname(from.threadname());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_tenantclass()) {
      set_tenantclass(from.tenantclass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XTraceReportv4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XTraceReportv4::CopyFrom(const XTraceReportv4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XTraceReportv4::IsInitialized() const {

  return true;
}

void XTraceReportv4::Swap(XTraceReportv4* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(event_id_, other->event_id_);
    parent_event_id_.Swap(&other->parent_event_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(hrt_, other->hrt_);
    std::swap(cycles_, other->cycles_);
    std::swap(host_, other->host_);
    std::swap(process_id_, other->process_id_);
    std::swap(process_name_, other->process_name_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(threadname_, other->threadname_);
    std::swap(agent_, other->agent_);
    std::swap(source_, other->source_);
    std::swap(label_, other->label_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    tags_.Swap(&other->tags_);
    std::swap(tenantclass_, other->tenantclass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XTraceReportv4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XTraceReportv4_descriptor_;
  metadata.reflection = XTraceReportv4_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
